generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum Mode {
  USER
  ADMIN
}

enum Gender {
  MALE
  FEMALE
}

enum Type {
  VOCABULARY
  EXPRESSIONS
}

enum PartOfSpeech {
  VERB
  NOUN
  PRONOUN
  ADJECTIVE
  ADVERB
  INTERJECTION
  PREPOSITION
  CONJUNCTION
}

enum Status {
  PUBLIC
  SEMI_PRIVATE
  PRIVATE
}

enum TrainingType {
  QUIZ
  FLASHCARDS
}

enum BillingReason {
  initial
  renewal
  updated
}

enum BookmarkType {
  WORD
  LIST
  PACK
  SET
}

enum MeaningType {
  WORD
}

type File {
  url String  @db.String
  key String?
}

model User {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  username String

  email String @unique
  hash  String

  avatar File?

  gender         Gender?
  nativeLanguage String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  passwordResetLink PasswordResetLink[]
  trainingSessions  TrainingSession[]
  bookmarks         Bookmarks[]

  billingInfo  BillingInfo?
  subscription Subscriptions?
}

model PasswordResetLink {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  code String @unique @db.String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @db.ObjectId

  createdAt DateTime @default(now())
}

// Billing 

model BillingInfo {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  firstName String
  lastName  String

  country     String
  city        String
  address     String
  phoneNumber Int
  postalCode  String

  user   User   @relation(fields: [userId], references: [id])
  userId String @unique @db.ObjectId
}

model Subscriptions {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  lsSubscriptionId String @unique
  productId        Int

  endsAt    DateTime?
  createdAt DateTime  @default(now())

  userId String @unique @db.ObjectId
  user   User   @relation(fields: [userId], references: [id])

  isUnlimite Boolean @default(false)

  payments Payments[]
}

model Payments {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  subscription   Subscriptions? @relation(fields: [subscriptionId], references: [id])
  subscriptionId String?        @db.ObjectId

  billingReason BillingReason

  subtotal Int
  tax      Int
  total    Int

  createdAt DateTime @default(now())
}

// Bookmarks
model Bookmarks {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @db.ObjectId

  type BookmarkType @default(WORD)

  set   Set?    @relation(fields: [setId], references: [id], onDelete: Cascade)
  setId String? @db.ObjectId

  pack   Pack?   @relation(fields: [packId], references: [id], onDelete: Cascade)
  packId String? @db.ObjectId

  word   Word?   @relation(fields: [wordId], references: [id], onDelete: Cascade)
  wordId String? @db.ObjectId

  wordList   WordList? @relation(fields: [wordListId], references: [id], onDelete: Cascade)
  wordListId String?   @db.ObjectId
}

// Vocabulary section & Dictionary

model Pack {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  sets PackToSet[]

  mode   Mode   @default(USER)
  status Status @default(PRIVATE)
  type   Type

  bookmarks Bookmarks[]
}

model PackToSet {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  set   Set    @relation(fields: [setId], references: [id], onDelete: Cascade)
  setId String @db.ObjectId

  pack   Pack   @relation(fields: [packId], references: [id], onDelete: Cascade)
  packId String @db.ObjectId
}

model Set {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  lists WordListToSet[]
  packs PackToSet[]

  mode Mode @default(USER)

  status      Status @default(PRIVATE)
  image       File
  name        String
  description String @db.String
  type        Type

  bokmarks Bookmarks[]
}

model WordListToSet {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  wordList   WordList @relation(fields: [wordListId], references: [id], onDelete: Cascade)
  wordListId String   @db.ObjectId

  set   Set    @relation(fields: [setId], references: [id], onDelete: Cascade)
  setId String @db.ObjectId
}

model WordList {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  trainingSessions TrainingSession[]
  words            WordToList[]
  sets             WordListToSet[]

  mode        Mode   @default(USER)
  status      Status @default(PRIVATE)
  type        Type
  name        String
  description String @db.String

  bookmarks Bookmarks[]
}

model WordToList {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  wordList   WordList @relation(fields: [wordListId], references: [id], onDelete: Cascade)
  wordListId String   @db.ObjectId

  word   Word   @relation(fields: [wordId], references: [id], onDelete: Cascade)
  wordId String @db.ObjectId

  meaning    Meanings @relation(fields: [meaningsId], references: [id], onDelete: Cascade)
  meaningsId String   @db.ObjectId
}

model Word {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  name          String
  meanings      Meanings[]
  transcription Transcription
  partsOfSpeech PartOfSpeech[]

  lists WordToList[]

  bookmarks Bookmarks[]
}

type Transcription {
  en String?
  us String?
}

model Meanings {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  definition   String
  image        File?
  examples     String[]
  partOfSpeech PartOfSpeech?

  type MeaningType @default(WORD)

  word   Word?   @relation(fields: [wordId], references: [id], onDelete: Cascade)
  wordId String? @db.ObjectId

  lists WordToList[] // Списки в яких використовується це визначення
}

// Training

model TrainingSession {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @db.ObjectId

  list   WordList @relation(fields: [listId], references: [id], onDelete: Cascade)
  listId String   @db.ObjectId

  type TrainingType
}

// TODO: Expression model, Phrasal Verb model
